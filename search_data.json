[
  
    {
      "title": "簡易なミニCSSフレームワークを作ってみる（７）",
      "url": "/Febris/posts/jekyll/design/custom-css-framework-7",
      "author": "82pkdick",
      "date1": "2019/06",
      "date2": "2019.06.17",
      "categories": ["Jekyll","design"],
      "tags": ["Jekyll","css"],
      "contents": "Tablemarkdown で書いた表を多少アレンジする方法を考えます。多少ですけどね。実際セル単位で何かいじるのはムリです。markdown 自体で文字揃えを変えたりできるので表現力は増すと思います。基本形まずは markdown の表(table)の書き方をおさらい。とりあえずヘッダー付きで。[markdown]| Column 1      | Column 2      | Column 3      || :-----------: | :-----------: | :-----------: || Cell Contents | Cell Contents | Cell Contents || You Can Also  | You Can Also  | You Can Also  || Cell Contents | Cell Contents | Cell Contents || You Can Also  | You Can Also  | You Can Also  |            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also      フッターも付けるとこういう書き方。めんどくさいです。VSCODEだと専用のプラグインあるみたいなので、そういうの使うと多少は楽でしょう。[markdown]| Column 1      | Column 2      | Column 3      || :------------ | ------------: | :-----------: || Cell Contents | Cell Contents | Cell Contents || You Can Also  | You Can Also  | You Can Also  || Cell Contents | Cell Contents | Cell Contents || You Can Also  | You Can Also  | You Can Also  || ============= | ============= | ============= || Footer        | Footer        | Footer        |列の中の文字寄せは２行目の書き方  | :------------ | 左寄せ  | ------------: | 右寄せ  | :-----------: | 中央揃え            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  Footer      Footer      Footer      デフォルトのCSSと変数で、例によって_sass/framework-modules/に_table-style.scssを作り、素のテーブル(デフォルト)のCSSを決めます。// table initial valuetable {  margin: 1.5em 0;  border-spacing: 0;  border-collapse: collapse;  table-layout: auto;  font-size: .875rem;  color: $default-table-font-color;  background: $default-table-background-color;  th, td {    @extend %table-border-base;    padding: $default-table-padding;   }  thead th {    @extend %table-header-border-base;    border-width: $default-table-header-border-width;    color: $default-table-header-font-color;    font-weight: bold;  }  tbody {    td {      border-width: $default-table-cell-border-width;    }    tr:last-child td, tr:last-child th {      border-bottom-width: 0;    }  }  tfoot {    td {      border-width: $default-table-foot-border-width;      border-color: $default-table-foot-border-color;    }  }}この中で使っている変数のリストが以下。これでも一部です。色の変数名は前に作った_color-palette.scssで定義されているもの。デフォルト値の色はほとんどモノクロ系です。後で表の部分部分の色変更をしますが、$light-gray3とかの独自定義のグレー以外は基本WEB140色の名前なので、色名知ってればわかります。// table default value$default-table-font-color: $dark-gray1;$default-table-header-font-color: $dark-gray3;$default-table-border-width: 1px;$default-table-border-style: solid;$default-table-border-color: $light-gray3;$default-table-padding: 0.5em 0.75em;$default-table-background-color: $white;$default-table-hover-background-color: #f5f5f5;$default-table-outside-border-color: $light-gray4;$default-table-header-border-color: $light-gray4;$default-table-header-border-width: 0 0 2px;$default-table-cell-border-width: 0 0 1px;$default-table-foot-border-width: 2px 0 0;$default-table-foot-border-color: $light-gray4;$default-table-border: 1px solid $default-table-border-color;$default-table-outside-border: 2.0px solid $default-table-outside-border-color;// border settings Inheritance source%table-border-base {  border-width: $default-table-border-width;  border-style: $default-table-border-style;  border-color: $default-table-border-color;}%table-outside-border-base {  border-width: $default-table-border-width;  border-style: $default-table-border-style;  border-color: $default-table-outside-border-color;}%table-header-border-base {  border-width: $default-table-header-border-width;  border-style: $default-table-border-style;  border-color: $default-table-header-border-color;}無駄といっていいくらい変数など多用してますが、これには理由があって、後で定義するCSS変数(Sassの変数とは共有できない)とデフォルト値を揃えておきたいからです。これでとりあえず表の見た目デフォルトがこんな感じになります。[一番シンプルな形]            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also      [フッター付き]            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  Footer      Footer      Footer      縦の罫はないタイプ。地味です。さて Bulma のテーブルのアレンジ方法を真似しつつ、また markdown でCSSクラス名を渡す方法で、この基本形の上に６種類のバリエーションを考えます。borderedまずはAdd borders to all the cells. 全て罫入りのオーソドックスな表。Bulma のクラス名はtable is-borderedですが、ルール単純化して.borderedにします。[markdown]| Column 1       | Column 2      | Column 3      || :------------: | :-----------: | :-----------: || Cell Contents  | Cell Contents | Cell Contents || You Can Also   | You Can Also  | You Can Also  || Cell Contents  | Cell Contents | Cell Contents || You Can Also   | You Can Also  | You Can Also  |{: .bordered}最後にくっついている{: .bordered}がテーブルの種類をアレンジするクラス名を kramdown に渡している部分。            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also      SCSS はベースになるCSSとの差分だけ記述していくので単純です。[scss]// full bordered tabletable.bordered {  border: $default-table-outside-border;  th {    @extend %table-header-border-base;    border-width: 2.0px 1.0px 2.0px;  }  td {    @extend %table-border-base;    border: $default-table-border;  }}striped偶数番目の行のバックに薄く色がついているやつ。クラス名渡しの部分だけ載せていきます。{: .striped}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also      [scss]table.striped {  th {    background: transparent;  }  tr:nth-child(even) {    background-color:  $light-gray1;  }}striped-odd奇数番目の行のバックに薄く色がついているやつ。.stripedの標準は偶数行、クラス名を.striped-oddとすると奇数行に色を付ける。{: .striped-odd}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also      narrow行の高さが狭いやつ。{: .narrow}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also      [scss]table.narrow {  th, td {    padding: 0.3em 0.5em;  }}hoverableマウスを行に重ねるとバックに色がつく。{: .hoverable}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also      [scss]table.hoverable {  th {    background: transparent;  }  tbody tr:hover {    background-color: $default-table-hover-background-color;  }}fullwidthwidth: 100%で横幅いっぱいになるやつ。{: .fullwidth}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also      [scss]table.fullwidth {  width: 100%;}Markdown上でテーブルのカスタマイズCSSカスタムプロパティ (CSS custom properties for cascading variables)ってありますよね。CSS変数とも呼ばれてるやつです。あれで表を若干ですがカスタマイズできるようにしてみます。変数名とバリエーションは、まんま Bulma を参考にしました。font の色変更表全体の文字色を変える--fcolor:色指定で表全体の文字色を変えます。クラス名渡しの部分だけ載せていきます。{: .fcolor style=&quot;--fcolor:#008000&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      {: style=&quot;color:#008000;&quot;}と書いてもヘッダーの文字色以外は変わるのですが、もっと複雑なこともやりたいとなると生のスタイル指定を末尾に書くのは困難でしょう。このあと出てくるのは全て.class-nameというクラス名が指定されているtableを検知して、--class-nameという名前のCSS変数からその変数値をCSSに適用するやり方です。最初CSSの属性セレクターを使って作っていったのですが、それだと複数の設定（文字色とバックの色を組み合わせるとか）が反映されない。属性セレクターでは複数の設定値は、最後に書いたもので上書きされてしまう（つまり最後の設定以外は検知されていない）で、結局クラス名で検知させる方法にしました。.fcolorと書いて、そのクラス名の前に”--“ハイフン２つ付けたCSSカスタム変数と値を書く(style=&quot;--fcolor:xxxxxx&quot;)のでめんどうですが妥協です。[scss]table.fcolor {   color: var(--fcolor, var(--tbl-color));  thead th { color: var(--fcolor, var(--tbl-color)) }}2番目の引数に代替値としてデフォルトの設定--tbl-colorの値が割り当てられます。これはSCSS側の変数$default-table-font-colorの値(今はカラーパレット定義_color-palette.scssで定義した$dark-gray1＝#555)が代入されているので、デフォルトの文字色の濃いグレーになります。{: style=&quot;--fcolor:&quot;}として単に値を指定しないとデフォルトが選ばれるだけですが、デフォルト値を変えれば他の色にもなります。ここでは16進数2桁のカラーコードで指定しましたが、色名が公式に決まっているものなら{: style=&quot;--fcolor:lightblue&quot;}などとも書けます。テーブル・ヘッダーの文字色はデフォルトの設定が勝つのでthead thも指定しないと変わりません。ここらあたりはtbodyだけでいいよという好みもありますが、仕様ということで。これから載せていくCSS変数の代替値には、一部を除いてSCSS変数の値が当てはめられていて、デフォルトの設定値をSCSSとCSS変数で共用しているわけです。最初にごちゃっと沢山のSCSS変数を定義したのは、この目的のためでした。tableのCSSの中で直接いろんな値を書いても動くわけですが、変数にして使い回すことで、共通利用でき、また修正箇所も一箇所で済みます。他にもいくつかCSS変数を定義しましたが、細かい説明は省略します。カスタムプロパティの名前と変更された外観で分かると思います。表ヘッダーの文字色を変える--thead-fcolorで表のヘッダーの文字だけ変えます。{: .thead-fcolor style=&quot;--thead-fcolor:maroon&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表フッターの文字色を変える--tfoot-fcolor{: .tfoot-fcolor style=&quot;--tfoot-fcolor:lime&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      backgroundの色変更表の背景色を変える--tbl-bgd{: .tbl-bgd style=&quot;--tbl-bgd:azure&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      ヘッダーの背景色を変える--thead-bgd{: .thead-bgd style=&quot;--thead-bgd:aquamarine&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表のボディーの背景色を変える--tbody-bgd{: .tbody-bgd style=&quot;--tbody-bgd:palegoldenrod&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表のフッターの背景色を変える--tfoot-bgd{: .tfoot-bgd style=&quot;--tfoot-bgd:wheat&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      偶数番目の行のバックの色を変えるこれはstripedクラスを指定した表に有効です。--row-even-bgd{: .striped .row-even-bgd style=&quot;--row-even-bgd:lavender&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      奇数番目の行のバックの色を変えるこれはstriped-oddクラスを指定した表に有効です。--row-odd-bgd{: .striped-odd .row-odd-bgd style=&quot;--row-odd-bgd:honeydew&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表のボーダーの変更全体のボーダーの太さ、スタイル、色を一括変更するCSSのボーダー属性の一括指定と同じくborder: width style colorの形で値を渡すタイプの変数--tbl-bdr{: .tbl-bdr style=&quot;--tbl-bdr: 3px dotted chocolate&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表のボーダーの太さ変更表のボーダーの太さを変えるborder-width: 1px 1px 1pxなどの形で値を与えるタイプ。--bdr-width{: .bdr-width style=&quot;--bdr-width: 0 4px&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表ヘッダーのボーダーの太さを変える--thead-bdr-width {: .thead-bdr-width style=&quot;--thead-bdr-width: 8px 0 6px&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表フッターのボーダーの太さを変える--tfoot-bdr-width{: .tfoot-bdr-width style=&quot;--tfoot-bdr-width: 4px 0 6px&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      ボーダーの色を変えるボーダーの色を変える設定を３種。わかりやすいように.borderedクラスも渡しています。表全体のボーダーの色を変える--tbl-bdr-color{: .bordered .tbl-bdr-color}{: style=&quot;--tbl-bdr-color: deepskyblue&quot;}クラスを渡す設定の文字数が、あとでだんだんと長くなってくるので、こんな２行以上に分けて書くやりかたも試します。            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表ヘッダーのボーダーの色を変えるヘッダー行のボーダーの太さを変える--thead-bdr-widthと併用してみました。--thead-bdr-color{: .bordered .thead-bdr-width .thead-bdr-color}{: style=&quot;--thead-bdr-width: 3px 1px 2px; --thead-bdr-color: magenta;&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      フッターのボーダー色を変える場合も同じですが、外枠がある場合はヘッダーの縦ボーダーの太さを外枠の太さ以上にしないと、色を付けた行の左右枠が埋もれてしまいます。.borderedなどでのデフォルト設定では1pxなので、外枠の太さを1pxより太くしていなければ、表示するには1px以上でOKです。表フッターのボーダーの色を変える--tfoot-bdr-color{: .bordered .tfoot-bdr-width .tfoot-bdr-color}{: style=&quot;--tfoot-bdr-width: 2px 2px 4px; --tfoot-bdr-color: orangered;&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      ボーダーのスタイルを変えるボーダーのスタイルを変える設定も３種。わかりやすいように適宜.borderedクラス、ボーダーの色や太さを変える設定など併用します。表全体のボーダーのスタイルを変える--tbl-bdr-style{: .bordered .bdr-width .tbl-bdr-color .tbl-bdr-style}{: style=&quot;--bdr-width:2px; --tbl-bdr-color:blue; --tbl-bdr-style: double dashed;&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表ヘッダーのボーダーのスタイルを変えるヘッダー行のボーダーの太さを変える--thead-bdr-widthなどと併用してみました。--thead-bdr-style{: .bordered .thead-bdr-width .thead-bdr-color .thead-bdr-style}{: style=&quot;--thead-bdr-width: 12px 0 6px; --thead-bdr-color:lime; --thead-bdr-style: double;&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表フッターのボーダーのスタイルを変える--tfoot-bdr-style{: .bordered .tfoot-bdr-width .tfoot-bdr-color .tfoot-bdr-style}{: style=&quot;--tfoot-bdr-width: 8px 0 15px; --tfoot-bdr-color:lightsteelblue; --tfoot-bdr-style: groove;&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      active, hover基本的にヘッダーとフッターは除いて tbody の要素に作用します。アクティブな行の文字色を変えるクリックしてからマウスを離すまで、その行の文字色が変わります。--row-active-fcolor{: .row-active-fcolor style=&quot;--row-active-fcolor: red&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      アクティブな行の文字を太くするクリックしてからマウスを離すまで、その行の文字がボールドに変わります。.active-boldこれは文字を太くするだけなのでクラス名だけの指定です。--row-active-fcolorと併用してみます。{: .active-bold .row-active-fcolor style=&quot;--row-active-fcolor: red&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      マウスを行に重ねた時の文字の色を変えるマウスを重ねた時の行の文字を変えます。--row-hover-bgdと併用してみます。--row-hover-fcolor{: .row-hover-fcolor .row-hover-bgd}{: style=&quot;--row-hover-fcolor: firebrick; --row-hover-bgd: gold;&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      マウスを行に重ねた時の文字を太くするマウスを重ねた時の行の文字をボールドにします.hover-boldこれもクラス名だけの指定です。.row-hover-fcolor,--row-hover-bgdと併用してみます。{: .hover-bold .row-hover-fcolor .row-hover-bgd}{: style=&quot;--row-hover-fcolor: firebrick; --row-hover-bgd: gold;&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      アクティブな行の背景色を変えるクリックしてからマウスを離すまで、その行の背景色が変わります。--row-active-bgd{: .row-active-bgd style=&quot;--row-active-bgd: mistyrose&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      マウスを行に重ねた時の背景色を変えるマウスを重ねた時の行の色を、指示した色に変更します--row-hover-bgd{: .row-hover-bgd style=&quot;--row-hover-bgd: palegreen&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      偶数番目の行にマウスを重ねた時の背景色を変えるstripedクラスで偶数番目の行にだけ色を付けた表で、その行にマウスを重ねた時のバックの色を変えます。--row-even-hover-bgd{: .striped .row-even-hover-bgd style=&quot;--row-even-hover-bgd: pink&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      奇数番目の行にマウスを重ねた時の背景色を変えるstriped-oddクラスで奇数番目の行にだけ色を付けた表で、その行にマウスを重ねた時のバックの色を変えます。--row-odd-hover-bgd{: .striped-odd .row-odd-hover-bgd style=&quot;--row-odd-hover-bgd: gold&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      padding を変更する表全体の padding を変える行のpaddingの数値を変えることで、行の幅と高さを変更します。$default-table-paddingの値は 上下 +0.5em、左右 +0.75em なので、渡す値がそれより大きいか小さいかで変化します。--tbl-paddingpadding: 0.8rem 1.2remの例{: .tbl-padding style=&quot;--tbl-padding: 0.8rem 1.2rem&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表ヘッダーの padding を変える表ヘッダーの幅と高さを変更します。デフォルトは$default-table-paddingの値。変化が分かりにくいので.borderedクラスも渡しています。--thead-paddingpadding-top: 1.0rem, padding-bottom: 0.8remの例{: .bordered .thead-padding}{: style=&quot;--thead-padding: 1.0rem 0 0.8rem&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      当然ですが、左右は他の行の padding があるので０に設定しても０にはなりません。表ボディの padding を変える表ボディの幅と高さを変更します。--tbody-paddingpadding: 0.2rem 2.0remで細く横長に。thead,tbody,tfootどこかの幅を変えれば当然他の行の幅も追随します。{: .bordered .tbody-padding}{: style=&quot;--tbody-padding: 0.2rem 2.0rem&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  You Can Also      You Can Also      You Can Also      表フッターの padding を変える表フッターの幅と高さを変更します。--tfoot-paddingpadding: 0.2px 1.8remで細いフッターに。{: .bordered .tfoot-padding style=&quot;--tfoot-padding: 0.2px 1.8rem&quot;}            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  Footer      Footer      Footer      いろいろ組み合わせた例いろんな設定を組み合わせたサンプル。何を使ったかは下の markdown を見て下さい。かなりやり過ぎ感満載ですが、markdown から表の中のパーツを装飾できるのは面白いです。            Column 1      Column 2      Column 3                  Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also              Cell Contents      Cell Contents      Cell Contents              You Can Also      You Can Also      You Can Also                  Footer      Footer      Footer      [markdown]| Column 1       | Column 2      | Column 3      || :------------: | :-----------: | :-----------: || Cell Contents  | Cell Contents | Cell Contents || You Can Also   | You Can Also  | You Can Also  || Cell Contents  | Cell Contents | Cell Contents || You Can Also   | You Can Also  | You Can Also  || ============== | ============= | ============= || Footer         | Footer        | Footer        |{: .fullwidth .striped .bordered  .tbody-bgd .bdr-width .tbl-bdr-color .tbl-bdr-style .thead-fcolor .thead-bgd .thead-padding .thead-bdr-width .thead-bdr-color .tfoot-fcolor .tfoot-bgd .tfoot-padding .tfoot-bdr-width .tfoot-bdr-color .row-even-bgd .hover-bold .row-hover-fcolor .row-hover-bgd}{: style=&quot;--tbody-bgd: lightcyan; --bdr-width: 1px;          --tbl-bdr-color: silver; --tbl-bdr-style: solid dashed;          --thead-fcolor: white; --thead-bgd: darkcyan;           --thead-padding: 1.5rem 0; --thead-bdr-width: 10px 0 5px;          --thead-bdr-color: darkblue;          --tfoot-fcolor: lightyellow; --tfoot-bgd: seagreen;          --tfoot-padding: 2.5px 0; --tfoot-bdr-width: 5px 0;          --tfoot-bdr-color: darkblue;          --row-even-bgd: lavender;          --row-hover-fcolor: deeppink; --row-hover-bgd: lavenderblush; &quot;}"  
    },
  
    {
      "title": "簡易なミニCSSフレームワークを作ってみる（６）",
      "url": "/Febris/posts/jekyll/design/custom-css-framework-6",
      "author": "82pkdick",
      "date1": "2019/06",
      "date2": "2019.06.15",
      "categories": ["Jekyll","design"],
      "tags": ["Jekyll","css"],
      "contents": "カラーパレットを作ってみよう前に作った Card と Grid Layout を使った仕組みで、１４０色+α のカラーパレットを作ってみよう。こういう細かいものを作っていくと部分部分で paddingとかfont-sizeとかいじりたくなるが、Jekyll の markdown は HTML をまんま処理してくれるので、ある記事の中でしか使わないようなスタイル設定は、記事先頭の Front-Matter の外、すぐ下に&amp;lt;style&amp;gt;〜&amp;lt;/stayle&amp;gt;で書いておくという方法もある。ここでは次のような CSS クラス.color-cardを記事先頭に設定して、各カードに割り当てた。.bg-xxxxxxが背景色設定、カードを囲む全体のグリッドブロックに付けた.grid-gap0クラスは、グリッド間隔を０にする設定。これらは自作フレームワークに新しく作った。&amp;lt;style&amp;gt;.color-card {  text-align: center;  padding-top: 20px;  /* 文字天地中央にする(ゴマカシｗ) */  font-size: 0.9em;}&amp;lt;/style&amp;gt;.bg-light-gray1 { background: $light-gray1; } // &amp;lt;--色名部分を変えていくだけ.grid-gap0 {  grid-gap: 0;}[markdown]&amp;gt; light-gray1&amp;gt; {: .card .bg-light-gray1 .color-card}&amp;gt; light-gray2&amp;gt; {: .card .bg-light-gray2 .color-card}&amp;gt; light-gray3&amp;gt; {: .card .bg-light-gray3 .color-card}&amp;gt; light-gray4&amp;gt; {: .card .bg-light-gray4 .color-card}&amp;gt; light-gray5&amp;gt; {: .card .bg-light-gray5 .color-card}&amp;gt; mid-gray1&amp;gt; {: .card .bg-light-gray6 .color-card}  ......&amp;gt; dark-gray3&amp;gt; {: .card .bg-light-gray1 .color-card}&amp;gt; dark-gray4&amp;gt; {: .card .bg-light-gray1 .color-card}{: .card .grid-col5 .grid-gap0 .border-none}全ての色を定義したファイルを、Jekyllのサイトルート直下の_sass/framework-modules/_color-palette.scssとした。Monotone  white  black  whitesmoke  gainsboro  lightgray  silver  darkgray  gray  dimgrayグレイ13色は独自に定義  light-gray1  light-gray2  light-gray3  light-gray4  light-gray5  mid-gray1  mid-gray2  mid-gray3  mid-gray4     dark-gray1  dark-gray2  dark-gray3  dark-gray4Skin color  snow  ghostwhite  floralwhite  linen  antiquewhite  papayawhip  blanchedalmond  bisque  moccasin  navajowhite  peachpuffBright and pale  mistyrose  lavenderblush  seashell  oldlace  ivory  honeydew  mintcream  azure  aliceblue  lavenderBlue gray  lightsteelblue  lightslategray  slategray      Blue  steelblue  royalblue  midnightblue  navy  darkblue  mediumblue  blue  dodgerblue  cornflowerblue  deepskyblueSky Blue  lightskyblue  skyblue  lightblue  powderblue  paleturquoise  lightcyanCyan  cyan  aqua  turquoise  mediumturquoise  darkturquoise  lightseagreen  cadetblue  darkcyan  tealGreen  darkslategray  darkgreen  green  forestgreen  seagreen  mediumseagreen  mediumaquamarine  darkseagreen  aquamarine  palegreen  lightgreen  springgreen  mediumspringgreen  lawngreen  chartreuse  greenyellow  lime  limegreen  yellowgreenOlive and Silky  darkolivegreen  olivedrab  olive  darkkhaki  palegoldenrod  cornsilk  beigeYellow and Orange  lightyellow  lightgoldenrodyellow  lemonchiffon  wheat  burlywood  tan  khaki  yellow  gold  orange  sandybrown  darkorange  goldenrod  peru  darkgoldenrod  chocolateBrown and Salmon  sienna  saddlebrown  maroon  darkred  brown  firebrick  indianred  rosybrown  darksalmon  lightcoral  salmon  lightsalmonRed  coral  tomato  orangered  red  crimsonPink  mediumvioletred  deeppink  hotpink  palevioletred  pink  lightpink  thistle  magenta  fuchsiaViolet  violet  plum  orchid  mediumorchid  darkorchid  darkviolet  darkmagenta  purple  indigo  darkslateblue  blueviolet  mediumpurple  slateblue  mediumslateblue"  
    },
  
    {
      "title": "簡易なミニCSSフレームワークを作ってみる（５）",
      "url": "/Febris/posts/jekyll/design/custom-css-framework-5",
      "author": "82pkdick",
      "date1": "2019/06",
      "date2": "2019.06.14",
      "categories": ["Jekyll","design"],
      "tags": ["Jekyll","css"],
      "contents": "Grid で横並びのブロックを作ってみようBox や Card を組み合わせて横並びのブロック要素を作ってみます。といっても markdown の中に HTML をごりごり書きたくない。またできるだけ Grid System でやりたい。で、markdown で作ろうとしたら要素を入れ子にできる記法をつかわなくてはならないわけですが、まさかリストでやるわけにもいかない。そこでそういうのに使える記法が１つだけあります。blockquoteです。3 Columns Box次の例は左右３コラムの Box、内側に３個の Card を持っている。  Nested paragraph 1.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 2.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 3.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit..box .grid-col3でできるようにした。[markdown]&amp;gt; Nested paragraph 1.&amp;gt; John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit. &amp;gt; {: .card}&amp;gt;&amp;gt; Nested paragraph 2.&amp;gt; John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit. &amp;gt; {: .card}&amp;gt;&amp;gt; Nested paragraph 3.&amp;gt; John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit. &amp;gt; {: .card}{: .box .grid-col3 .fc-gray}[css].grid-col3 {  display: grid;  grid-template-columns: repeat(3, 1fr);  grid-auto-rows: minmax(2.0rem, auto);  justify-content: center;  grid-row-gap: 2%;  grid-column-gap: 1%;  grid-auto-flow: dense;}外側の罫線が不要なら.border-noneで消せる。もちろん内側にこれを指定すれば内罫線も消える。.fc-gray は内側の文字の色をグレーにしているだけ。{: .box .grid-col3 .fc-gray .border-none}  Nested paragraph 1.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 2.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 3.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.外の箱と内の箱は、Box と Card のどういう組合せでもOK.いろいと仕組みができてきたので、一部分だけバックの色を変えるとかも可能。次の例は内側の Card のバックや文字の色を変えたり、外の Card にタイトル(H4)やちょっとした文章、フッターとなる一文など追加した例。Gridはそのままだと一番文章の長い要素に合わせて高さが決まってしまうので、タイトルやパラグラフなどに見せようとしても高さが広がりすぎてしまったりする。そこで.block-title, .block-para, .block-footerといったクラスを追加して空きを調整している。またデフォルトのままだと横幅が１コラムになる。タイトルとかパラグラフ、フッターなどは横幅100％使わないとダメなので.grid-col3でコラム3つ分の巾にする。ただし640px以下のスマートフォン・スクリーンではコラム１の巾にしないと中のボックスが伸縮して縦並びになってくれない。ま、そこはMedia Queriesで対処した。  Headers in box 3 columns  A blockquote box.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 1.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 2.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 3.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  This is the outer quote again.[markdown]&amp;gt; #### Headers in box 3 columns&amp;gt; {: .grid-col-span3 .block-title}&amp;gt;&amp;gt; A blockquote box.&amp;gt; John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.&amp;gt; {: .grid-col-span3 .block-para}&amp;gt;&amp;gt; Nested paragraph 1.&amp;gt; John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit. &amp;gt; {: .card .fc-darkblue .bg-whitesmoke}&amp;gt;&amp;gt; Nested paragraph 2.&amp;gt; John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit. &amp;gt; {: .card}&amp;gt;&amp;gt; Nested paragraph 3.&amp;gt; John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit. &amp;gt; {: .card .fc-white .bg-dark-gray3}&amp;gt;&amp;gt; This is the outer quote again.&amp;gt; {: .grid-col-span3 .block-footer .align-r}{: .card .grid-col3 .fc-gray}まあここまでくると HTML 直書きと変わらないややこしさになってくるが、いろいろ出来るのはいいかと。以下コラム数を変えたパターン。.grid-col数字で 2〜6まで作ってみた。サイトのレイアウトに用いる Grid は直接 Jekyll のテンプレートや CSS に書いていくし、文中に使うものとしては６コラム以上はいらんだろうと考えた。一応スマートフォン対応で、どのコラム数設定の場合も640px以下のスクリーンでコラム数１(縦並び)になる。2 Columns Box次の例は左右２コラムの Card、内側に２個の Box を持っている。{: .card .grid-col2 .fc-gray}  Nested paragraph 1.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 2.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.4 Columns Box  Nested paragraph 1.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 2.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 3.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 4.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.5 Columns Box  Nested paragraph 1.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 2.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 3.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 4.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 5.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.6 Columns Box  Nested paragraph 1.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 2.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 3.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 4.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 5.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 6.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.もちろん Grid の仕様でアイテムの数がコラム数より多ければ、自動的に次の行に配置される。たとえば.grid-col4でアイテムが６なら、  Nested paragraph 1.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 2.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 3.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 4.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 5.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Nested paragraph 6.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit."  
    },
  
    {
      "title": "簡易なミニCSSフレームワークを作ってみる（４）",
      "url": "/Febris/posts/jekyll/design/custom-css-framework-4",
      "author": "82pkdick",
      "date1": "2019/06",
      "date2": "2019.06.14",
      "categories": ["Jekyll","design"],
      "tags": ["Jekyll","css"],
      "contents": "Box と CardBulma の Box はこんな感じのもの。John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas. Nullam condimentum luctus turpis.Bulma の Card.John Smith @johnsmith 31m Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas. Nullam condimentum luctus turpis.見た目は角が四角いか丸いかの違いである。この Bulma の Box と Card を参考に似たような仕組みを作れないだろうか？block要素の width指定.box,.cardというクラスで上のような箱になるようにして。それとは別にwd-数値で横幅を指定できるようにしてみる。20%から100%まで10%きざみで選べるようにする。width:20%の.wd2からwidth:100%の.wd10まで揃える。[HTML(Box width:”20%”) sample]&amp;lt;p class=&quot;box wd2&quot;&amp;gt;  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.&amp;lt;/p&amp;gt;[css].box {    display: block;    margin: 0;    padding: 0.5rem;    box-sizing: border-box;    border-radius: 6px;    box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);}.wd2 {    width: 20%;}boxクラスのCSSに横幅は指定しない。ブラウザにもよるのだろうがChromeだとwidth:&quot;auto&quot;で親要素の横幅いっぱいになる。だから指定しないとデフォルトのwidth: autoになっている。Box の例[.box wd2]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.box wd3]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.box wd4]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.box wd5]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.box wd6]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.box wd7]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.box wd8]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.box wd9]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.box wd10]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.Card の例[.card wd2]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.card wd3]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.card wd4]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.card wd5]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.card wd6]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.card wd7]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.card wd8]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.card wd9]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.[.card wd10]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas.Box, card の活用kramdown のクラス指定は、一番直近(外側)の要素に加わる。例えば Box と card の中身を次のようにHTMLで書けば、外側のDIV要素にboxクラスが加えられる。こんな写真入りのカードっぽい要素にもなる。内側だけ Flexbox 使えばもっとよくなるかも。手書きはちょっとめんどうだが、テンプレ作ってincludeならできそう。[markdown]&amp;lt;div&amp;gt;&amp;lt;img src=&quot;/assets/images/013.jpg&quot; alt=&quot;church&quot; style=&quot;width:20%;&quot;&amp;gt;&amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.Aenean efficitur sit amet massa fringilla egestas.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;{: .box}Lorem ipsum dolor sit amet, consectetur adipiscing elit.Aenean efficitur sit amet massa fringilla egestas."  
    },
  
    {
      "title": "簡易なミニCSSフレームワークを作ってみる（３）",
      "url": "/Febris/posts/jekyll/design/custom-css-framework-3",
      "author": "82pkdick",
      "date1": "2019/06",
      "date2": "2019.06.14",
      "categories": ["Jekyll","design"],
      "tags": ["Jekyll","css"],
      "contents": "文字に色を付けるあまり使わないemphasisを利用して文字色を変えてみる。色指定クラスを指定しなければ普通にemphasisとして使えるので問題ないかと思う。こうすればemphasisだが、[markdown]*フォントに色*を付ける。フォントに色を付ける。インライン要素にクラス名が付けられるのを利用して文字色を変えてみる。[markdown]*フォントに色*{: .fc-red}を付けるフォントに色を付ける[html]&amp;lt;em class=&quot;fc-red&quot;&amp;gt;フォントに色を付ける&amp;lt;/em&amp;gt;emタグだがCSS側でfont-style: normal;にしてしまいcolor: red;にしている。クラス名にfc-色名で文字色指定する。本文中の説明とかいれたいとき。　&amp;lt;– こんな感じで使えるかももし斜体文字に色をつけたかったらまたスタイルを指定しないといけないが、日本語だとあまり使わないので問題ないだろう。ただ。どうしてもイタリックの色文字にしたい場合のために、{: style=&quot;font-style: italic;&quot;}とか書かなくていいように、emクラスも定義しておく。[markdown]*イタリックの色文字*{: .em .fc-red} です。イタリックの色文字 です。文字の太さを変える同じ手法で文字の太さを部分的に変える。markdownでも**太文字**とすれば太文字になるが、より太く、より細くも用意できる。[markdown]フォントの*太さノーマル*{: .fw-normal}。_font weight is normal_{: .fw-normal}.フォントの*太さを*{: .fw-bold}変える。_font weight is bold_{: .fw-bold}.より*太い文字*{: .fw-bolder}。_font weight is bolder_{: .fw-bolder}.より*細い文字*{: .fw-lighter}。_font weight is lighter_{: .fw-lighter}.フォントの太さノーマル。font weight is normal.フォントの太さを変える。font weight is bold.より太い文字。font weight is bolder.より細い文字。font weight is lighter.cssの設定はboldとbolderの区別がつきにくいのでbolderのみ数値で設定している。font-weight: 1000;は最高値なので細かい文字はつぶれる。また日本語だとlighterにあまり意味がない。[css].fw-lighter { font-weight: lighter; }.fw-normal { font-weight: normal; }.fw-bold { font-weight: bold; }.fw-bolder { font-weight: 1000; }太さboldで、文字色oliveとした例[markdown]_オリーブ色の太い文字_{: .fw-bold .fc-olive}です。オリーブ色の太い文字です。"  
    },
  
    {
      "title": "簡易なミニCSSフレームワークを作ってみる（２）",
      "url": "/Febris/posts/jekyll/design/custom-css-framework-2",
      "author": "82pkdick",
      "date1": "2019/06",
      "date2": "2019.06.13",
      "categories": ["Jekyll","design"],
      "tags": ["Jekyll","css"],
      "contents": "文字の大きさを指定するクラスとりあえず文字関連のスタイルを指定するクラスの定義ファイルから作ってみる。_sass/framework/_font-style.scssとしよう。クラス名は後で利用するときは短いものがいいだろうが、ここでは少々長くても直感的に意味の分かるものにする。_font-style.scssに次のように書いていく。[scss].font-size1 {  font-size: 3.0rem;}これを使って markdown で記事中に何か書いてみる。[markdown]Font Size 1{: .font-size1}Font Size 1HTML は次のように書きだされる。[html]&amp;lt;p class=&quot;font-size1&quot;&amp;gt;Font Size 1&amp;lt;/p&amp;gt;以下 H2〜H6。Bulma では級数が一つ下がると 0.5rem 下がるのでこれに準じることにするが、最後のfont-size5とfont-size6は小さくなりすぎるので微調整。以下HTMLは省略。[css].font-size2 {  font-size: 2.5rem;}[markdown]Font Size 2{: .font-size2}Font Size 2[css].font-size3 {  font-size: 2.0rem;}[markdown]Font Size 3{: .font-size3}Font Size 3[css].font-size4 {  font-size: 1.5rem;}[markdown]Font Size 4{: .font-size4}Font Size 4[css].font-size5 {  font-size: 1.3rem;}[markdown]Font Size 5{: .font-size5}Font Size 5[css].font-size6 {  font-size: 1.1rem;}[markdown]Font Size 6{: .font-size6}Font Size 6図やコードなどのキャプション図の表題とかコードの上にファイル名を付けたい時など、普通にPタグや H6 などでは地味であったりいらないマージンがあったりして使いづらい。クラスにcaption-nameと付けると図やコードの左上に近づいたキャプションになるようにする。[css].caption-name {  font-size: 0.7rem;  margin: 0 2px;  padding: 0;}[markdown][print_out.cpp]{: .caption-name}```cppstd::cout &amp;lt;&amp;lt; &quot;Test&quot;;```それで、もうすでにこのサイトであちこち使っているキャプションだが、こんな感じになる。　　　↓[print_out.cpp]std::cout &amp;lt;&amp;lt; &quot;Test&quot;;左寄せ、右寄せ、中央、両端揃え、数値寄せ横方向の文字寄せのためのこんなクラス名を考えた。align-l, align-r, align-c, align-j, margin-xx[css].align-l {  text-align: left;  margin-left: 0;}[markdown]Text left{: .align-l}Text left[html]&amp;lt;p class=&quot;align-l&quot;&amp;gt;Text left&amp;lt;/p&amp;gt;以下プレヴューのみ[Text right][Text center][Text left]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla accumsan, metus ultrices eleifend gravida, nulla nunc varius lectus, nec rutrum justo nibh eu lectus. Ut vulputate semper dui. Fusce erat odio, sollicitudin vel erat vel, interdum mattis neque.[Text right]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla accumsan, metus ultrices eleifend gravida, nulla nunc varius lectus, nec rutrum justo nibh eu lectus. Ut vulputate semper dui. Fusce erat odio, sollicitudin vel erat vel, interdum mattis neque.[Text center]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla accumsan, metus ultrices eleifend gravida, nulla nunc varius lectus, nec rutrum justo nibh eu lectus. Ut vulputate semper dui. Fusce erat odio, sollicitudin vel erat vel, interdum mattis neque.[Text justify]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla accumsan, metus ultrices eleifend gravida, nulla nunc varius lectus, nec rutrum justo nibh eu lectus. Ut vulputate semper dui. Fusce erat odio, sollicitudin vel erat vel, interdum mattis neque.margin-l1で左マージン 1.0rem 寄り。数字だけ変えて 2.0rem, 3.0rem の3種対応。同様にmargin-r1で右マージン 1.0rem, 2.0rem, 3.0rem。[Text margin left 1.0rem, align justify]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla accumsan, metus ultrices eleifend gravida, nulla nunc varius lectus, nec rutrum justo nibh eu lectus. Ut vulputate semper dui. Fusce erat odio, sollicitudin vel erat vel, interdum mattis neque.[Text margin left 2.0rem, align justify]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla accumsan, metus ultrices eleifend gravida, nulla nunc varius lectus, nec rutrum justo nibh eu lectus. Ut vulputate semper dui. Fusce erat odio, sollicitudin vel erat vel, interdum mattis neque.[Text margin left 3.0rem, align justify]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla accumsan, metus ultrices eleifend gravida, nulla nunc varius lectus, nec rutrum justo nibh eu lectus. Ut vulputate semper dui. Fusce erat odio, sollicitudin vel erat vel, interdum mattis neque.[Text margin right １.0rem, align right]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla accumsan, metus ultrices eleifend gravida, nulla nunc varius lectus, nec rutrum justo nibh eu lectus. Ut vulputate semper dui. Fusce erat odio, sollicitudin vel erat vel, interdum mattis neque.[Text margin right 2.0rem, align right]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla accumsan, metus ultrices eleifend gravida, nulla nunc varius lectus, nec rutrum justo nibh eu lectus. Ut vulputate semper dui. Fusce erat odio, sollicitudin vel erat vel, interdum mattis neque.[Text margin right 3.0rem, align right]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla accumsan, metus ultrices eleifend gravida, nulla nunc varius lectus, nec rutrum justo nibh eu lectus. Ut vulputate semper dui. Fusce erat odio, sollicitudin vel erat vel, interdum mattis neque.[Text margin left 3.0rem, right 3.0rem, align justify]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla accumsan, metus ultrices eleifend gravida, nulla nunc varius lectus, nec rutrum justo nibh eu lectus. Ut vulputate semper dui. Fusce erat odio, sollicitudin vel erat vel, interdum mattis neque.上下の空き段落の改行ほどは要らないがちょっとだけ上下を空けたいときがある。  margin-top 10〜20px  margin-t1, margin-t2, margin-t3  margin-bottom 10〜20px  margin-b1, margin-b2, margin-b3□ 指定なしの場合文章どうしの空き文章どうしの空き□ 2行目にmargin-top:10px[markdown]文章どうしの空き文章どうしの空き{: .margin-t1}文章どうしの空き文章どうしの空き□ 2行目にmargin-top:20px文章どうしの空き文章どうしの空き□ 2行目にmargin-top:30px文章どうしの空き文章どうしの空き見た目わかりにくいけどこんどはmargin-bottom:xxx□ 1行目にmargin-bottom:10px文章どうしの空き文章どうしの空き□ 1行目にmargin-bottom:20px文章どうしの空き文章どうしの空き□ 1行目にmargin-bottom:30px文章どうしの空き文章どうしの空き透明な線バックが透明な線hrを入れることで、少し空きを持たせる方法もある。次のように書くと透明な線になる。[markdown]-----------------------------------------{: .bg-none}たまに前の段落とタイトルとかが思い通りの空きにならないときに使えるかも。ただしどの程度空くかは他のhrの設定しだい。そこもバリエーションつけたクラスを作ってもいいけど、面倒なのでやらない。"  
    },
  
    {
      "title": "簡易なミニCSSフレームワークを作ってみる（１）",
      "url": "/Febris/posts/jekyll/design/custom-css-framework-1",
      "author": "82pkdick",
      "date1": "2019/06",
      "date2": "2019.06.13",
      "categories": ["Jekyll","design"],
      "tags": ["Jekyll","css"],
      "contents": "そもそもやりたかったことJekyll でサイトを構築しようとしている。レイアウトをある程度作り込んでから、記事の中で表組みやボタンなどの部品をあらためて定義していくのは面倒だ。ただ既存のCSSフレームワークなどをその段階から導入すると、作ったレイアウトが崩れる。CSSフレームワークって、最初の計画段階で決めておくべきもの。レイアウトが崩れるのは計画性のない自分が悪い(笑)。ただ試してみると、CSSフレームワークにも元のレイアウトを崩しやすいものと、そうでないものがあるのがよく分かる。次の条件で何かいいものはないか？  軽量でJavaScriptを使用していない.  SCSS対応試してみると比較的 Bulma がレイアウト崩れしにくかった。ただ Bulma は Flexbox を利用している。すでに Grid Layout で作っているのでそこはパス。おおまかなレイアウトは自分でCSS書いた方が早いし、また、特定のCSSレイアウトを深く理解して使うという学習コストをかけたくない。ちなみにこの記事に書かれていることが妙に共感できたので参考まで。CSS フレームワークを使いたくないhttp://jinjor-labo.hatenablog.com/entry/2019/03/13/084116なんかわかるわ〜…(^o^)開発というほどの話ではない。仕組みと規定値を決めてクラスを指定するとデザインが決まるという程度のものでいい。markdown の中でも使える簡易なフレームワークっぽい仕組みを作れないか。記事の内部で使うボタンや表などのエレメント、フォントや色の設定を少しだけ変えられるもの。Bulma を参考にしつつ試してみた。Markdown でクラスを指定する方法Bulma などのCSSフレームワークは特定のクラス名を追加すると、部品スタイルをよしなに設定してくれるものが多い。Jekyll で使うためには、 ｍarkdown でクラス名を追加する必要があるが、デフォルトの markdown の仕様にはそういう仕組みが無い。しかし markdownレンダラーの kramdown ならクラス指定などができる。ちょっとめんどうだけど。[markdown]Element{: .post-elem}こう書くとこうなる。Element[html]&amp;lt;p class=&quot;post-elem&quot;&amp;gt;Element&amp;lt;/p&amp;gt;直接のスタイル指定もできなくはない。まあ面倒だししないだろうけど。[markdown]Element{: .post-elem}{: style=&quot;padding: 10px 15px; border: 1px solid #ccc;&quot;}ここでは{: xxxxx}を2行に分けて書いたけど別に1行にまとめてもいい。Element[html]&amp;lt;p class=&quot;post-elem&quot; style=&quot;padding: 10px 15px; border: 1px solid #ccc;&quot;&amp;gt;Element&amp;lt;/p&amp;gt;Bulmaの見出し設定のやり方Bulma では指定されているクラスを追加すると、H1などの見出しタグでなくても見出しになる。 Bulma の見出しには.title .is-N（Nは1〜6までの数字）の形のタイトルと、.subtitle .is-Nの形のサブタイトルがある。[markdown]# Title1{: .title .is-1}Title01[html]&amp;lt;h1 class=&quot;title is-1&quot;&amp;gt;Title1&amp;lt;/h1&amp;gt; 手始めとして、例えば次のような目的で、このやり方が使えないだろうか。  一つは、特定のクラスを指定すると文字の大きさがそこだけ変えられる。  さらに cord を表示する際にキャプションを付けたい時、適当なスタイルが適応されるクラス。  段落中のちょっとした文字寄せを指定できるとか。フレームワークファイルの読み込み方フレームワークファイルをどこに置いてどう読み込むか？いろんなやり方があるのだろうが、ここではJekyll の_sassディレクトリに_private-framework.scssというファイルをつくる。さらに同じく_sassディレクトリの中にframework-modulesというサブディレクトリを作り、そのなかに役割りを表す名前のファイルを置く。これが個別のモジュールになる。例えば_sass/framework-modules/_font-style.scssなどの名前のモジュール・ファイルを置く。そして_sass/_private-framework.scssに、@import &quot;framework-modules/font-style.scss&quot;などとして個別のモジュール・ファイルを読み込む。[_sass/_private-framework.scss]// Custom framework@import &quot;framework-modules/font-style.scss&quot;;そしてこの_sass/_private-framework.scss をメインのassets/css/styles.scssから@importする。[assets/css/styles.scss]// Minimal Framework for private use@import &quot;private-framework&quot;;あとは追加のモジュールを、例えば_sass/framework-modules/_table-style.scssとか作れば、また_private-framework.scss に@importして足していけばよい。$ cd _sass/$ tree ..├── _01_common.scss├── _02_layout.scss├── _03_site-header.scss├── _04_navigation.scss  .............................├── _private-framework.scss # &amp;lt;- フレームワークのモジュールを読み込むscss└── framework-modules # &amp;lt;- モジュールの置き場所    └── _font-style.scss # &amp;lt;- 個別のフレームワーク・モジュール以下この方法で私的使用のミニフレームワークを作ってみよう。"  
    },
  
    {
      "title": "Ruby great!",
      "url": "/Febris/posts/language/ruby/Ruby-very-great",
      "author": "82pkdick",
      "date1": "2019/02",
      "date2": "2019.02.14",
      "categories": ["language","ruby"],
      "tags": ["ruby","programing"],
      "contents": "RubyとはRubyは、手軽なオブジェクト指向プログラミングを実現するための種々の機能を持つオブジェクト指向スクリプト言語です。400: Invalid requestTry Ruby123456789101112131415class person  def initialize(name)    @name = name  end  def hello    &quot;Hello, friend!\\nMy name is #{@name}!&quot;  endendcharlie = Person.new(&quot;Charlie&quot;)puts charlie.hello#=&amp;gt; Hello, friend!#=&amp;gt; My name is Charlie!"  
    },
  
    {
      "title": "Welcome to Jekyll!",
      "url": "/Febris/posts/jekyll/update/welcome-to-jekyll",
      "author": "82pkdick",
      "date1": "2019/01",
      "date2": "2019.01.28",
      "categories": ["Jekyll","update"],
      "tags": ["blog"],
      "contents": "Welcome to Jekyll!You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name)  puts &quot;Hi, #{name}&quot;endprint_hi(&#39;Tom&#39;)#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk."  
    },
  
    {
      "title": "Jekyllのチュートリアル",
      "url": "/Febris/posts/jekyll/jekyll-Tutorial",
      "author": "82pkdick",
      "date1": "2019/01",
      "date2": "2019.01.28",
      "categories": ["Jekyll"],
      "tags": ["technology","blog"],
      "contents": "Jekyllのチュートリアルgrid-row:Jekyll is a simple, blog aware, static site generator."  
    },
  
    {
      "title": "Hello World!",
      "url": "/Febris/posts/test/hello-world",
      "author": "82pkdick",
      "date1": "2018/11",
      "date2": "2018.11.21",
      "categories": ["test"],
      "tags": ["testpost"],
      "contents": "First post.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."  
    },
  
    {
      "title": "Second Blog Post",
      "url": "/Febris/posts/jekyll/post/second-blog-post",
      "author": "82pkdick",
      "date1": "2016/09",
      "date2": "2016.09.04",
      "categories": ["Jekyll","post"],
      "tags": ["blog"],
      "contents": "This is the second blog post on my website!"  
    },
  
    {
      "title": "My First Blog Post",
      "url": "/Febris/posts/jekyll/post/my-first-post",
      "author": "82pkdick",
      "date1": "2016/07",
      "date2": "2016.07.02",
      "categories": ["Jekyll","post"],
      "tags": ["blog"],
      "contents": "You’ll find this post in your _posts directory. Go ahead and edit it and re-buildthe site to see your changes. You can rebuild the site in many different ways, butthe most common way is to run jekyll serve, which launches a web server andauto-regenerates your site when a file is updated.To add new posts, simply add a file in the _posts directory that follows theconvention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter.Take a look at the source for this post to get an idea about how it works."  
    },
  
    {
      "title": "Rubyの哲学",
      "url": "/Febris/posts/programming/ruby/ruby_02",
      "author": "82pkdick",
      "date1": "2012/08",
      "date2": "2012.08.06",
      "categories": ["programming","ruby"],
      "tags": ["programming_language","LL"],
      "contents": "Rubyの哲学開発者のまつもとゆきひろは、「Rubyの言語仕様策定において最も重視しているのはストレスなくプログラミングを楽しむこと (Enjoy programming) である」と述べている(ただし、明文化された公式な言語仕様は2008年5月現在存在しない)。Perlのモットー「やり方はいろいろある (TMTOWTDI; There’s More Than One Way To DoIt)」は「多様性は善(Diversity is Good)」というスローガンでRubyに引き継がれてはいるものの、最重要なものではないとも述べており、非推奨な手法も可能とすると同時に、そのような手法を言語仕様的に使いにくくする事によって、自粛を促しているため洗脳言語(Babel-17)という側面がある。"  
    },
  
    {
      "title": "Rubyのクロージャ",
      "url": "/Febris/posts/programming/ruby/ruby_01_memo-1",
      "author": "82pkdick",
      "date1": "2012/08",
      "date2": "2012.08.05",
      "categories": ["programming","ruby"],
      "tags": ["programming_language","LL","Closure"],
      "contents": "クロージャー(Closure) とは？プログラミング言語において、クロージャ (クロージャー、Closure) は関数の一種である。引数以外の変数を実行時の環境ではなく、自身が定義された環境（静的スコープ）において解決する。関数とそれを評価する環境のペアであるともいえる。"  
    },
  
    {
      "title": "Rubyとは",
      "url": "/Febris/posts/programming/ruby/ruby_01",
      "author": "82pkdick",
      "date1": "2012/08",
      "date2": "2012.08.04",
      "categories": ["programming","ruby"],
      "tags": ["programming_language","LL"],
      "contents": "Rubyとは？Ruby（ルビー）は、まつもとゆきひろ（通称Matz）により開発されたオブジェクト指向スクリプト言語であり、従来Perlなどのスクリプト言語が用いられてきた領域でのオブジェクト指向プログラミングを実現する。Rubyは当初1993年2月24日に生まれ、1995年12月にfj上で発表された。名称のRubyは、プログラミング言語Perlが6月の誕生石であるPearl（真珠）とほぼ同じ発音をすることから、まつもとの同僚の誕生石（7月）のルビーを取って名付けられた。機能として、クラス定義、ガベージコレクション、強力な正規表現処理、マルチスレッド、例外処理、イテレータ・クロージャ、Mixin、演算子オーバーロードなどがある。Perlの代替となることができることが初期の段階から重視されている。Perlと同様にグルー言語としての使い方が可能で、Cプログラムやライブラリを呼び出す拡張モジュールを組み込むことができる。Ruby処理系は、主にインタプリタとして実装されている（詳しくは[[実装]]を参照）。構文は、ALGOL系を継承しながら、可読性を重視している。Rubyにおいては整数や文字列なども含めデータ型はすべてがオブジェクトであり、純粋なオブジェクト指向言語といえる。フリーソフトウェアとしてruby ライセンス（Ruby License や Ruby’s と表記されることもある。GPLかArtisticに似た独自ライセンスを選択するデュアルライセンス）で配布されている。Ruby哲学開発者のまつもとゆきひろは、「Rubyの言語仕様策定において最も重視しているのはストレスなくプログラミングを楽しむことである (Enjoy programming)」と述べている。(ただし、明文化された公式な言語仕様は2008年5月現在存在しない。)Perlのモットー「やり方はいろいろある (TMTOWTDI; There’s More Than One Way To DoIt)」は「多様性は善(Diversity is Good)」というスローガンでRubyに引き継がれてはいるものの最重要なものではないとも述べており、非推奨な手法も可能にするとともに、そのような手法を言語仕様により使いにくくすることによって自粛を促している。これは言語仕様が「望ましい」習慣の押し付けを行うということであり、洗脳言語(Babel-17)と言われる一面でもある。実装公式な実装Rubyの公式な実装には、以下の二種類が存在する。            MRI（Matz’ Ruby Implementation)      1.8.x以前の公式実装。まつもとゆきひろによって開発されはじめたC言語による実装であり、最も広く使われている。JRubyに対してCRubyと呼ばれることもある。              YARV      1.9.0で採用された、MRIを拡張した公式な処理系。これはソースコードをJIT方式でバイトコードへコンパイルした後、バイトコードを仮想機械上で実行するインタプリタである。      その他の実装:JRuby:Javaベースの実装。純粋なJavaで行われているため、プラットフォーム非依存の利用が可能。ほとんどのRubyクラスが組み込みで提供されている。JIT方式に加え、AOT方式のJavaバイトコードへのコンパイラも用意されている（AOT方式でコンパイルしたJavaバイトコードはJRubyが無くても他のJavaプラットフォーム上で動作させることが可能となる）。  IronRuby := .NET Framework上でRubyを動作させる実装であり、.NET Frameworkのライブラリと連携させることができる。JIT方式のバイトコードインタプリタ。共通言語基盤に準拠した実装（Monoなど）で動作するため、プラットフォーム非依存の利用も可能（ただし、ソースコードが.NET Frameworkのライブラリに依存している場合はMonoでの動作は不可能）。  RubyCocoa、MacRuby := いずれもMac OS X上で動作するRuby実装。Cocoaを含む様々なフレームワークとの連携が可能。RubyCocoaはMac OS X Leopard以降に標準でインストールされており、MacRubyはRubyCocoaの問題点を解決するために開発されている。  Rubinius := 仮想機械上でRubyを実行するJIT方式のバイトコードインタプリタ。大部分がRubyで実装されている。その他  Parrot上でRubyを動作させるための実装なども開発されている。競合言語としてのPythonプログラミング言語としてのRubyは大雑把に言うと「Perlのオブジェクト指向版」、つまりインタプリタで実行する高機能なスクリプト言語でありオブジェクト指向機能を持つもの、と位置づけることができるが、この位置付けはスクリプト言語Pythonと同じである。このことがそれぞれの言語のユーザ同士の間で「どちらの言語が優れているか」といった論争を生んできた。しかしその論争は技術的な細部にとらわれた不毛な議論になることも多かった。ここであえて両者の細部を比較はしないが、ユーザ数や書かれたシステムの数量・質などを現時点で比べると世界的にはPythonの方が人気が高い。一方、日本では開発者が日本人であることもあり、Rubyの人気は高く書籍も多く出版されている。とはいえ2004年前後まで圧倒的なキラーアプリがなく、tDiaryやバグトラッキングシステム「影舞」程度しか知られていなかったため、大きな普及には至らなかった。ところが2004年末に発表され2005年に大ブレイクしたRuby on Railsにより一気に注目を集めている。例基本的なコード# 文字リテラルを含め全てがオブジェクトである-199.abs                                       # 199&quot;ruby is cool&quot;.length                          # 12&quot;Rick&quot;.index(&quot;c&quot;)                              # 2&quot;Nice Day Isn&#39;t It?&quot;.split(//).uniq.sort.join  # &quot; &#39;?DINaceinsty&quot;コレクション配列の作成と使用法a = [1, &#39;hi&#39;, 3.14, 1, 2, [4, 5]] a[2]                      # 3.14a.reverse                 # [[4, 5], 2, 1, 3.14, &#39;hi&#39;, 1]a.flatten.uniq            # [1, &#39;hi&#39;, 3.14, 2, 4, 5]ハッシュの作成と使用法hash = {&#39;water&#39; =&amp;gt; &#39;wet&#39;, &#39;fire&#39; =&amp;gt; &#39;hot&#39;}puts hash[&#39;fire&#39;]       # 表示:  hot hash.each_pair do |key, value|  puts &quot;#{key} is #{value}&quot;end # 表示:               water is wet#                     fire is hot hash.delete_if {|key, value| key == &#39;water&#39;}   # Deletes &#39;water&#39; =&amp;gt; &#39;wet&#39;制御構造ほかの言語でもよくみられるような制御構造を用いることができるif &quot;fablic&quot;.length &amp;gt; 3  puts &#39;ya&#39;else  puts &#39;nop&#39;end# 表示:         ya n = 0while n &amp;lt; 3  puts &#39;foobar&#39;  n += 1end# 表示:         foobar#               foobar#               foobar一部の制御構造は後述するイテレータで代替することができる。ブロックとイテレータrubyではブロック付きメソッド呼び出し（イテレータとも呼ばれる）を 用いるコードが好まれることが多い。これを用いると、ユーザー定義の制御構造やコールバック など様々な処理を簡潔に記述できる利点があるからである。ブロックの表記方法には二つの方法がある。メソッドの末尾に記述することで機能する{ puts &quot;Hello, World!&quot; }do puts &quot;Hello, World!&quot; endブロック付きメソッド呼び出しが繰り返し処理を主な役割としていたことから、イテレータと呼ばれていた時期がある。しかし、実際には繰り返し処理にとどまらず、様々な使われ方をしているので、最近はブロック付きメソッド呼び出し全体の総称としてイテレータという名称を用いるのは適切でないと考えられている。[1]繰り返し処理配列の各要素への繰り返し処理list = [1, 2, 5, 13, 21]list.collect!{|item| item * 2}          # listの各要素を２倍する以下はブロックを使わずに同じことを行う場合list = [1, 2, 5, 13, 21]n = 0while n &amp;lt; list.length  list[n] *= 2  n += 1end指定した回数の繰り返し処理3.times{ puts &#39;foobar&#39; }       #制御構造の項のwhileの例と同じ後処理の省力化ブロックの内容を実行してから、決められた後処理を行うメソッドもあるFile.open(&#39;file.txt&#39;, &#39;w+b&#39;) do |file|  file.puts &#39;Wrote some text.&#39;end                             # Fileはここで自動的にcloseされるこれは次の例と同様の処理を行う（ensureについては例外処理の項を参照）begin  file = File.open(&#39;file.txt&#39;, &#39;w+b&#39;)  file.puts &#39;Wrote some text.&#39;ensure  file.closeend本処理を後から指定実際に行いたい処理をブロックで記述する。 前項の後処理の省力化もこれの一例といえる。def bfs(list)       #配列をツリーに見立てた処理  while not list.empty?    unit = list.shift    yield unit      #ブロックの内容を実行    unit.each{|v| list.push v} if defined? unit.push  endendbfs([0,1,[2,3],4,[5,[6,7,8]],9]) {|v| p v}この例は”ツリーから要素と分枝をつぎつぎと取り出し”て”取り出したものになんらかの処理を行う” ものである。メソッドの利用者は、”なんらかの処理”のみを記述すればよく、取り出しのアルゴリズムなど、本質的でない内容に意識を向ける必要がなくなる。H3 クロージャH4 クロージャとなるようなブロックの引数渡しH5 クロージャとなるようなブロックの引数渡しH6 クロージャとなるようなブロックの引数渡し# オブジェクトのインスタンス変数（変数名の頭に@が付く）でブロックを記憶。def remember(&amp;amp;p)  @block = pend# nameを受け取るブロックを引数に、上記のメソッドを呼び出す。remember {|name| puts &quot;Hello, &quot; + name + &quot;!&quot;}# 後に必要になった時点でクロージャを呼び出す。@block.call(&quot;John&quot;)# 表示:&quot;Hello, John!&quot;メソッドからクロージャを返す例def create_set_and_get(value = 0)  return proc {|x| value = x}, proc { value }end setter, getter = create_set_and_getsetter.call(21)getter.call # =&amp;gt; 21“クロージャ”:ruby_01_memo-1.htmlクラス次のコードはPersonという名前のクラスである。その中、まずinitializeはオブジェクトを初期化するコンストラクタである。ほかに2つのメソッドがあり、1つは比較演算子である&amp;lt;=&amp;gt;をオーバーライドしておりArray#sortによりプロパティageでソートすることができる。もう1つのオーバーライド箇所のto_sメソッドは Kernel#puts での表示の形式を整える。attr_readerはRubyにおけるメタプログラミングの例であり、attr はインスタンス変数の入出力を司るgetterやsetterメソッド（アクセサ）を定義する。attr_readerはgetterメソッドのみの定義である。なおメソッド中では最後に評価された式が返り値となり、明示的なreturnは省略できる。class Person  def initialize(name, age)    @name, @age = name, age  end   def &amp;lt;=&amp;gt;(person)    @age &amp;lt;=&amp;gt; person.age  end   def to_s    &quot;#{@name} (#{@age})&quot;  end   attr_reader :name, :ageend group = [ Person.new(&quot;John&quot;, 20),          Person.new(&quot;Markus&quot;, 63),          Person.new(&quot;Ash&quot;, 16)        ] puts group.sort.reverse結果は3つの名前が年の大きい順に表示されるMarkus (63)John (20)Ash (16)例外処理例外はなにか不具合が起こったときraiseの呼び出しで発生させることができる。 Rubyでの例外はExceptionクラスか、そのサブクラスのインスタンスである。例外にはメッセージを追加することもできるraise &quot;This is a message&quot;さらに例外のタイプも指定できるraise ArgumentError, &quot;Illegal arguments!&quot;例外はrescue節で処理することができ、次のようにコードにrescueを付加するだけであるbegin  # 通常処理rescue  # 例外処理ensure  # 例外の発生に関わらず必ず実行される処理endRubyの周辺技術  分散オブジェクトを実現するdRuby  Apache HTTP Serverに組み込むためのmod ruby  サーバサイドでHTMLへの埋め込みRuby文を実現するeRuby  Rubyスクリプトに埋め込むことができる文書形式RD  RubyによるRDを採用したWikiクローン、RWiki  RubyからSDLライブラリを扱えるようにするRuby/SDL  RubyからDelphiを扱えるようにするApollo  RubyによるWebアプリケーションフレームワークRuby on Rails  Rubyの別の処理系であるYARV（Yet another RubyVM）  Rubyの統合開発環境RDE（Ruby Development Environment）  RubyのコードをWindowsの実行形式ファイルに変換するExerb  Ruby用のライブラリ管理システムであるRubyGems  Microsoft WindowsのActiveX環境でrubyインタープリターを呼び出すActiveScriptRuby (Internet Explorer限定だがHTMLに埋めこんでクライアント上で動かすスクリプト言語としてRubyを指定できるようになる - サーバ上で動作する eRubyとは区別すること)  RubyからWin32APIやCOMコンポーネントを呼び出すためのライブラリー WIN32OLE  JavaScriptやFlash上で動くRubyの処理系HotRuby  Rubyによるビヘイビア駆動開発のためのフレームワークRSpec  Rubyで書かれたビルドツール RakeRubyで開発されたアプリケーション  tDiary          分散オブジェクトを実現するdRuby        影舞  Hiki  Ruby on Rails  Redmine  qwikWeb  WEBrickRubyを組み込んだアプリケーション  RPGツクールXP・RPGツクールVX := 株式会社エンターブレインから発売されているRPG制作ソフトシリーズのうち、RPGツクールXPとRPGツクールVXでは、Rubyをツクール専用にカスタマイズした Ruby Game Scripting System (RGSS)を搭載している。同シリーズの従来ソフトではあらかじめ用意された機能しか使えなかったが、これにより戦闘などのシステムを一から構築する事が出来るようになった。エピソードRubyではブロック構造をendで終える構文が採用されているが、開発者のまつもとゆきひろは他の構文が採用される可能性があったことを述べている。当時、Emacs上でendで終える構文をオートインデントさせた例はあまりなく、Ruby言語用の編集モードにオートインデント機能を持たせられるかどうかが問題になっていたためである。実際には数日の試行でオートインデント可能であることがわかり、現在の構文になった。C言語のような{}を使った構文を採用することも検討されていたが、結局これは採用されなかった。            Column 1      Column 2      Column 3                  Cell Contents      More Stuff      And Again              You Can Also      Put Pipes In      Like this |                  Column 1      Column 2      Column 3                  Things      Don’t      Need              To      Look      Pretty                  Fun      With      Tables                  left-aligned column      right-aligned column      centered column              $100      $100      $100              $10      $10      $10              $1      $1      $1      "  
    },
  
    {
      "title": "入力ストリーム",
      "url": "/Febris/posts/programming/c/cpp/cpp_03",
      "author": "82pkdick",
      "date1": "2011/12",
      "date2": "2011.12.31",
      "categories": ["programming","c","cpp"],
      "tags": ["programming_language"],
      "contents": "今度は入力ストリームを見ていきます。これは標準入力 （通常はキーボード）からの入力を受け取ります。具体的には次のように記述します。#include &amp;lt;iostream&amp;gt;int main(){\tint num;\t\tstd::cin &amp;gt;&amp;gt; num;\tstd::cout &amp;lt;&amp;lt; num;\treturn 0; }このプログラムは、キーボードから入力された数値を、そのまま出力します。入力には std::cinを使います。シフト演算子（実際にシフト演算をしている訳ではない）の向きが、std::coutとは逆向きになっていることに気を付けて下さい。これは、つまり入出力の方向を表している訳です。つまり、入力時は変数numに向かってデータが流れていく、出力時は変数numからデータが流れていくということです。&amp;lt;/p&amp;gt;当然ですが、入力ストリームの場合、入力先は変数です。ここに定数を置くことはできません。std::coutと同じく、std::cinもデータの型を問いませんし、入力先を連結できます。次のコードは全て有効です。"  
    },
  
    {
      "title": "出力ストリーム",
      "url": "/Febris/posts/programming/c/cpp/cpp_02",
      "author": "82pkdick",
      "date1": "2011/11",
      "date2": "2011.11.30",
      "categories": ["programming","c","cpp"],
      "tags": ["programming_language"],
      "contents": "C++では、cout を使って出力処理を行えます。例えば、次のようにコードを書けば、画面に”Test”と出力されます。std::cout &amp;lt;&amp;lt; &quot;Test&quot;;これは、Ｃ言語で次のように書くのと同じことです。fprintf( stdout, &quot;Test&quot; );つまり、標準出力（通常は画面）に対して出力を行うということです。"  
    },
  
    {
      "title": "最小のC++プログラム",
      "url": "/Febris/posts/programming/c/cpp/cpp_01",
      "author": "82pkdick",
      "date1": "2011/10",
      "date2": "2011.10.29",
      "categories": ["programming","c","cpp"],
      "tags": ["programming_language"],
      "contents": "まずは、一番小さいC++プログラムを見てみます。int main(){\treturn 0;}"  
    }
  
]
